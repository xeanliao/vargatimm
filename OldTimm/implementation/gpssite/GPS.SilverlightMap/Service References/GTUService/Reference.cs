//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace GPS.SilverlightMap.GTUService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GTU", Namespace="http://schemas.datacontract.org/2004/07/GTUService.TIMM")]
    public partial class GTU : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AccuracyField;
        
        private int AreaCodeField;
        
        private int CellIDField;
        
        private string CodeField;
        
        private int CountField;
        
        private GPS.SilverlightMap.GTUService.Coordinate CurrentCoordinateField;
        
        private double DistanceField;
        
        private long GPSFixField;
        
        private int HeadingField;
        
        private int IDField;
        
        private string IPAddressField;
        
        private int LocationIDField;
        
        private int NetworkCodeField;
        
        private GPS.SilverlightMap.GTUService.PowerInfo PowerInfoField;
        
        private System.DateTime ReceivedTimeField;
        
        private System.DateTime SendTimeField;
        
        private double SpeedField;
        
        private GPS.SilverlightMap.GTUService.Status StatusField;
        
        private string VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Accuracy {
            get {
                return this.AccuracyField;
            }
            set {
                if ((this.AccuracyField.Equals(value) != true)) {
                    this.AccuracyField = value;
                    this.RaisePropertyChanged("Accuracy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AreaCode {
            get {
                return this.AreaCodeField;
            }
            set {
                if ((this.AreaCodeField.Equals(value) != true)) {
                    this.AreaCodeField = value;
                    this.RaisePropertyChanged("AreaCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CellID {
            get {
                return this.CellIDField;
            }
            set {
                if ((this.CellIDField.Equals(value) != true)) {
                    this.CellIDField = value;
                    this.RaisePropertyChanged("CellID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPS.SilverlightMap.GTUService.Coordinate CurrentCoordinate {
            get {
                return this.CurrentCoordinateField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentCoordinateField, value) != true)) {
                    this.CurrentCoordinateField = value;
                    this.RaisePropertyChanged("CurrentCoordinate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Distance {
            get {
                return this.DistanceField;
            }
            set {
                if ((this.DistanceField.Equals(value) != true)) {
                    this.DistanceField = value;
                    this.RaisePropertyChanged("Distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GPSFix {
            get {
                return this.GPSFixField;
            }
            set {
                if ((this.GPSFixField.Equals(value) != true)) {
                    this.GPSFixField = value;
                    this.RaisePropertyChanged("GPSFix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Heading {
            get {
                return this.HeadingField;
            }
            set {
                if ((this.HeadingField.Equals(value) != true)) {
                    this.HeadingField = value;
                    this.RaisePropertyChanged("Heading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationID {
            get {
                return this.LocationIDField;
            }
            set {
                if ((this.LocationIDField.Equals(value) != true)) {
                    this.LocationIDField = value;
                    this.RaisePropertyChanged("LocationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NetworkCode {
            get {
                return this.NetworkCodeField;
            }
            set {
                if ((this.NetworkCodeField.Equals(value) != true)) {
                    this.NetworkCodeField = value;
                    this.RaisePropertyChanged("NetworkCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPS.SilverlightMap.GTUService.PowerInfo PowerInfo {
            get {
                return this.PowerInfoField;
            }
            set {
                if ((this.PowerInfoField.Equals(value) != true)) {
                    this.PowerInfoField = value;
                    this.RaisePropertyChanged("PowerInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReceivedTime {
            get {
                return this.ReceivedTimeField;
            }
            set {
                if ((this.ReceivedTimeField.Equals(value) != true)) {
                    this.ReceivedTimeField = value;
                    this.RaisePropertyChanged("ReceivedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SendTime {
            get {
                return this.SendTimeField;
            }
            set {
                if ((this.SendTimeField.Equals(value) != true)) {
                    this.SendTimeField = value;
                    this.RaisePropertyChanged("SendTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GPS.SilverlightMap.GTUService.Status Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Coordinate", Namespace="http://schemas.datacontract.org/2004/07/GTUService.TIMM")]
    public partial class Coordinate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AltitudeField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PowerInfo", Namespace="http://schemas.datacontract.org/2004/07/GTUService.TIMM")]
    public enum PowerInfo : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ON = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OFF = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnKnown = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/GTUService.TIMM")]
    public enum Status : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OutBoundary = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Frozen = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OutAndFrozen = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnKnown = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GTUService.IGTUQueryService")]
    public interface IGTUQueryService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/GetGTU", ReplyAction="http://tempuri.org/IGTUQueryService/GetGTUResponse")]
        System.IAsyncResult BeginGetGTU(string sGTUCode, System.AsyncCallback callback, object asyncState);
        
        GPS.SilverlightMap.GTUService.GTU EndGetGTU(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/GetGTUs", ReplyAction="http://tempuri.org/IGTUQueryService/GetGTUsResponse")]
        System.IAsyncResult BeginGetGTUs(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.GTU> EndGetGTUs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/GetCurrentCoordinate", ReplyAction="http://tempuri.org/IGTUQueryService/GetCurrentCoordinateResponse")]
        System.IAsyncResult BeginGetCurrentCoordinate(string sGTUCode, System.AsyncCallback callback, object asyncState);
        
        GPS.SilverlightMap.GTUService.Coordinate EndGetCurrentCoordinate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/GetCurrentCoordinates", ReplyAction="http://tempuri.org/IGTUQueryService/GetCurrentCoordinatesResponse")]
        System.IAsyncResult BeginGetCurrentCoordinates(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> EndGetCurrentCoordinates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/GetGTUInfo", ReplyAction="http://tempuri.org/IGTUQueryService/GetGTUInfoResponse")]
        System.IAsyncResult BeginGetGTUInfo(string sGTUCode, ref int nHeading, ref double dwSpeed, ref GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndGetGTUInfo(ref int nHeading, ref double dwSpeed, ref GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/GetGTUCodeList", ReplyAction="http://tempuri.org/IGTUQueryService/GetGTUCodeListResponse")]
        System.IAsyncResult BeginGetGTUCodeList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetGTUCodeList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/RegisterDM", ReplyAction="http://tempuri.org/IGTUQueryService/RegisterDMResponse")]
        System.IAsyncResult BeginRegisterDM(System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> oArea, System.AsyncCallback callback, object asyncState);
        
        string EndRegisterDM(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/IsInArea", ReplyAction="http://tempuri.org/IGTUQueryService/IsInAreaResponse")]
        System.IAsyncResult BeginIsInArea(GPS.SilverlightMap.GTUService.Coordinate cn, string geoStr, System.AsyncCallback callback, object asyncState);
        
        bool EndIsInArea(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/RemoveTaskFromStore", ReplyAction="http://tempuri.org/IGTUQueryService/RemoveTaskFromStoreResponse")]
        System.IAsyncResult BeginRemoveTaskFromStore(int tid, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveTaskFromStore(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGTUQueryService/AddTaskToStore", ReplyAction="http://tempuri.org/IGTUQueryService/AddTaskToStoreResponse")]
        System.IAsyncResult BeginAddTaskToStore(int tid, System.AsyncCallback callback, object asyncState);
        
        bool EndAddTaskToStore(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGTUQueryServiceChannel : GPS.SilverlightMap.GTUService.IGTUQueryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGTUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGTUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public GPS.SilverlightMap.GTUService.GTU Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((GPS.SilverlightMap.GTUService.GTU)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGTUsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGTUsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.GTU> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.GTU>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentCoordinateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentCoordinateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public GPS.SilverlightMap.GTUService.Coordinate Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((GPS.SilverlightMap.GTUService.Coordinate)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentCoordinatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentCoordinatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGTUInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGTUInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int nHeading {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public double dwSpeed {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[1]));
            }
        }
        
        public GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo {
            get {
                base.RaiseExceptionIfNecessary();
                return ((GPS.SilverlightMap.GTUService.PowerInfo)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGTUCodeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGTUCodeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterDMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterDMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsInAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsInAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveTaskFromStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveTaskFromStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTaskToStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTaskToStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GTUQueryServiceClient : System.ServiceModel.ClientBase<GPS.SilverlightMap.GTUService.IGTUQueryService>, GPS.SilverlightMap.GTUService.IGTUQueryService {
        
        private BeginOperationDelegate onBeginGetGTUDelegate;
        
        private EndOperationDelegate onEndGetGTUDelegate;
        
        private System.Threading.SendOrPostCallback onGetGTUCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGTUsDelegate;
        
        private EndOperationDelegate onEndGetGTUsDelegate;
        
        private System.Threading.SendOrPostCallback onGetGTUsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentCoordinateDelegate;
        
        private EndOperationDelegate onEndGetCurrentCoordinateDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentCoordinateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentCoordinatesDelegate;
        
        private EndOperationDelegate onEndGetCurrentCoordinatesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentCoordinatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGTUInfoDelegate;
        
        private EndOperationDelegate onEndGetGTUInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetGTUInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGTUCodeListDelegate;
        
        private EndOperationDelegate onEndGetGTUCodeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetGTUCodeListCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDMDelegate;
        
        private EndOperationDelegate onEndRegisterDMDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterDMCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsInAreaDelegate;
        
        private EndOperationDelegate onEndIsInAreaDelegate;
        
        private System.Threading.SendOrPostCallback onIsInAreaCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveTaskFromStoreDelegate;
        
        private EndOperationDelegate onEndRemoveTaskFromStoreDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveTaskFromStoreCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTaskToStoreDelegate;
        
        private EndOperationDelegate onEndAddTaskToStoreDelegate;
        
        private System.Threading.SendOrPostCallback onAddTaskToStoreCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GTUQueryServiceClient() {
        }
        
        public GTUQueryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GTUQueryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GTUQueryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GTUQueryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetGTUCompletedEventArgs> GetGTUCompleted;
        
        public event System.EventHandler<GetGTUsCompletedEventArgs> GetGTUsCompleted;
        
        public event System.EventHandler<GetCurrentCoordinateCompletedEventArgs> GetCurrentCoordinateCompleted;
        
        public event System.EventHandler<GetCurrentCoordinatesCompletedEventArgs> GetCurrentCoordinatesCompleted;
        
        public event System.EventHandler<GetGTUInfoCompletedEventArgs> GetGTUInfoCompleted;
        
        public event System.EventHandler<GetGTUCodeListCompletedEventArgs> GetGTUCodeListCompleted;
        
        public event System.EventHandler<RegisterDMCompletedEventArgs> RegisterDMCompleted;
        
        public event System.EventHandler<IsInAreaCompletedEventArgs> IsInAreaCompleted;
        
        public event System.EventHandler<RemoveTaskFromStoreCompletedEventArgs> RemoveTaskFromStoreCompleted;
        
        public event System.EventHandler<AddTaskToStoreCompletedEventArgs> AddTaskToStoreCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginGetGTU(string sGTUCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGTU(sGTUCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GPS.SilverlightMap.GTUService.GTU GPS.SilverlightMap.GTUService.IGTUQueryService.EndGetGTU(System.IAsyncResult result) {
            return base.Channel.EndGetGTU(result);
        }
        
        private System.IAsyncResult OnBeginGetGTU(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sGTUCode = ((string)(inValues[0]));
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginGetGTU(sGTUCode, callback, asyncState);
        }
        
        private object[] OnEndGetGTU(System.IAsyncResult result) {
            GPS.SilverlightMap.GTUService.GTU retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndGetGTU(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGTUCompleted(object state) {
            if ((this.GetGTUCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGTUCompleted(this, new GetGTUCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGTUAsync(string sGTUCode) {
            this.GetGTUAsync(sGTUCode, null);
        }
        
        public void GetGTUAsync(string sGTUCode, object userState) {
            if ((this.onBeginGetGTUDelegate == null)) {
                this.onBeginGetGTUDelegate = new BeginOperationDelegate(this.OnBeginGetGTU);
            }
            if ((this.onEndGetGTUDelegate == null)) {
                this.onEndGetGTUDelegate = new EndOperationDelegate(this.OnEndGetGTU);
            }
            if ((this.onGetGTUCompletedDelegate == null)) {
                this.onGetGTUCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGTUCompleted);
            }
            base.InvokeAsync(this.onBeginGetGTUDelegate, new object[] {
                        sGTUCode}, this.onEndGetGTUDelegate, this.onGetGTUCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginGetGTUs(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGTUs(sGTUCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.GTU> GPS.SilverlightMap.GTUService.IGTUQueryService.EndGetGTUs(System.IAsyncResult result) {
            return base.Channel.EndGetGTUs(result);
        }
        
        private System.IAsyncResult OnBeginGetGTUs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<string> sGTUCode = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginGetGTUs(sGTUCode, callback, asyncState);
        }
        
        private object[] OnEndGetGTUs(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.GTU> retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndGetGTUs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGTUsCompleted(object state) {
            if ((this.GetGTUsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGTUsCompleted(this, new GetGTUsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGTUsAsync(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode) {
            this.GetGTUsAsync(sGTUCode, null);
        }
        
        public void GetGTUsAsync(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode, object userState) {
            if ((this.onBeginGetGTUsDelegate == null)) {
                this.onBeginGetGTUsDelegate = new BeginOperationDelegate(this.OnBeginGetGTUs);
            }
            if ((this.onEndGetGTUsDelegate == null)) {
                this.onEndGetGTUsDelegate = new EndOperationDelegate(this.OnEndGetGTUs);
            }
            if ((this.onGetGTUsCompletedDelegate == null)) {
                this.onGetGTUsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGTUsCompleted);
            }
            base.InvokeAsync(this.onBeginGetGTUsDelegate, new object[] {
                        sGTUCode}, this.onEndGetGTUsDelegate, this.onGetGTUsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginGetCurrentCoordinate(string sGTUCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentCoordinate(sGTUCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GPS.SilverlightMap.GTUService.Coordinate GPS.SilverlightMap.GTUService.IGTUQueryService.EndGetCurrentCoordinate(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentCoordinate(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentCoordinate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sGTUCode = ((string)(inValues[0]));
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginGetCurrentCoordinate(sGTUCode, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentCoordinate(System.IAsyncResult result) {
            GPS.SilverlightMap.GTUService.Coordinate retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndGetCurrentCoordinate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentCoordinateCompleted(object state) {
            if ((this.GetCurrentCoordinateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentCoordinateCompleted(this, new GetCurrentCoordinateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentCoordinateAsync(string sGTUCode) {
            this.GetCurrentCoordinateAsync(sGTUCode, null);
        }
        
        public void GetCurrentCoordinateAsync(string sGTUCode, object userState) {
            if ((this.onBeginGetCurrentCoordinateDelegate == null)) {
                this.onBeginGetCurrentCoordinateDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentCoordinate);
            }
            if ((this.onEndGetCurrentCoordinateDelegate == null)) {
                this.onEndGetCurrentCoordinateDelegate = new EndOperationDelegate(this.OnEndGetCurrentCoordinate);
            }
            if ((this.onGetCurrentCoordinateCompletedDelegate == null)) {
                this.onGetCurrentCoordinateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentCoordinateCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentCoordinateDelegate, new object[] {
                        sGTUCode}, this.onEndGetCurrentCoordinateDelegate, this.onGetCurrentCoordinateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginGetCurrentCoordinates(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentCoordinates(sGTUCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> GPS.SilverlightMap.GTUService.IGTUQueryService.EndGetCurrentCoordinates(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentCoordinates(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentCoordinates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<string> sGTUCode = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginGetCurrentCoordinates(sGTUCode, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentCoordinates(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndGetCurrentCoordinates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentCoordinatesCompleted(object state) {
            if ((this.GetCurrentCoordinatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentCoordinatesCompleted(this, new GetCurrentCoordinatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentCoordinatesAsync(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode) {
            this.GetCurrentCoordinatesAsync(sGTUCode, null);
        }
        
        public void GetCurrentCoordinatesAsync(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode, object userState) {
            if ((this.onBeginGetCurrentCoordinatesDelegate == null)) {
                this.onBeginGetCurrentCoordinatesDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentCoordinates);
            }
            if ((this.onEndGetCurrentCoordinatesDelegate == null)) {
                this.onEndGetCurrentCoordinatesDelegate = new EndOperationDelegate(this.OnEndGetCurrentCoordinates);
            }
            if ((this.onGetCurrentCoordinatesCompletedDelegate == null)) {
                this.onGetCurrentCoordinatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentCoordinatesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentCoordinatesDelegate, new object[] {
                        sGTUCode}, this.onEndGetCurrentCoordinatesDelegate, this.onGetCurrentCoordinatesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginGetGTUInfo(string sGTUCode, ref int nHeading, ref double dwSpeed, ref GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGTUInfo(sGTUCode, ref nHeading, ref dwSpeed, ref ePowerInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GPS.SilverlightMap.GTUService.IGTUQueryService.EndGetGTUInfo(ref int nHeading, ref double dwSpeed, ref GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo, System.IAsyncResult result) {
            return base.Channel.EndGetGTUInfo(ref nHeading, ref dwSpeed, ref ePowerInfo, result);
        }
        
        private System.IAsyncResult OnBeginGetGTUInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sGTUCode = ((string)(inValues[0]));
            int nHeading = ((int)(inValues[1]));
            double dwSpeed = ((double)(inValues[2]));
            GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo = ((GPS.SilverlightMap.GTUService.PowerInfo)(inValues[3]));
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginGetGTUInfo(sGTUCode, ref nHeading, ref dwSpeed, ref ePowerInfo, callback, asyncState);
        }
        
        private object[] OnEndGetGTUInfo(System.IAsyncResult result) {
            int nHeading = this.GetDefaultValueForInitialization<int>();
            double dwSpeed = this.GetDefaultValueForInitialization<double>();
            GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo = this.GetDefaultValueForInitialization<GPS.SilverlightMap.GTUService.PowerInfo>();
            bool retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndGetGTUInfo(ref nHeading, ref dwSpeed, ref ePowerInfo, result);
            return new object[] {
                    nHeading,
                    dwSpeed,
                    ePowerInfo,
                    retVal};
        }
        
        private void OnGetGTUInfoCompleted(object state) {
            if ((this.GetGTUInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGTUInfoCompleted(this, new GetGTUInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGTUInfoAsync(string sGTUCode, int nHeading, double dwSpeed, GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo) {
            this.GetGTUInfoAsync(sGTUCode, nHeading, dwSpeed, ePowerInfo, null);
        }
        
        public void GetGTUInfoAsync(string sGTUCode, int nHeading, double dwSpeed, GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo, object userState) {
            if ((this.onBeginGetGTUInfoDelegate == null)) {
                this.onBeginGetGTUInfoDelegate = new BeginOperationDelegate(this.OnBeginGetGTUInfo);
            }
            if ((this.onEndGetGTUInfoDelegate == null)) {
                this.onEndGetGTUInfoDelegate = new EndOperationDelegate(this.OnEndGetGTUInfo);
            }
            if ((this.onGetGTUInfoCompletedDelegate == null)) {
                this.onGetGTUInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGTUInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetGTUInfoDelegate, new object[] {
                        sGTUCode,
                        nHeading,
                        dwSpeed,
                        ePowerInfo}, this.onEndGetGTUInfoDelegate, this.onGetGTUInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginGetGTUCodeList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGTUCodeList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> GPS.SilverlightMap.GTUService.IGTUQueryService.EndGetGTUCodeList(System.IAsyncResult result) {
            return base.Channel.EndGetGTUCodeList(result);
        }
        
        private System.IAsyncResult OnBeginGetGTUCodeList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginGetGTUCodeList(callback, asyncState);
        }
        
        private object[] OnEndGetGTUCodeList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndGetGTUCodeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGTUCodeListCompleted(object state) {
            if ((this.GetGTUCodeListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGTUCodeListCompleted(this, new GetGTUCodeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGTUCodeListAsync() {
            this.GetGTUCodeListAsync(null);
        }
        
        public void GetGTUCodeListAsync(object userState) {
            if ((this.onBeginGetGTUCodeListDelegate == null)) {
                this.onBeginGetGTUCodeListDelegate = new BeginOperationDelegate(this.OnBeginGetGTUCodeList);
            }
            if ((this.onEndGetGTUCodeListDelegate == null)) {
                this.onEndGetGTUCodeListDelegate = new EndOperationDelegate(this.OnEndGetGTUCodeList);
            }
            if ((this.onGetGTUCodeListCompletedDelegate == null)) {
                this.onGetGTUCodeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGTUCodeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetGTUCodeListDelegate, null, this.onEndGetGTUCodeListDelegate, this.onGetGTUCodeListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginRegisterDM(System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> oArea, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterDM(oArea, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string GPS.SilverlightMap.GTUService.IGTUQueryService.EndRegisterDM(System.IAsyncResult result) {
            return base.Channel.EndRegisterDM(result);
        }
        
        private System.IAsyncResult OnBeginRegisterDM(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> oArea = ((System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate>)(inValues[0]));
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginRegisterDM(oArea, callback, asyncState);
        }
        
        private object[] OnEndRegisterDM(System.IAsyncResult result) {
            string retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndRegisterDM(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterDMCompleted(object state) {
            if ((this.RegisterDMCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterDMCompleted(this, new RegisterDMCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterDMAsync(System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> oArea) {
            this.RegisterDMAsync(oArea, null);
        }
        
        public void RegisterDMAsync(System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> oArea, object userState) {
            if ((this.onBeginRegisterDMDelegate == null)) {
                this.onBeginRegisterDMDelegate = new BeginOperationDelegate(this.OnBeginRegisterDM);
            }
            if ((this.onEndRegisterDMDelegate == null)) {
                this.onEndRegisterDMDelegate = new EndOperationDelegate(this.OnEndRegisterDM);
            }
            if ((this.onRegisterDMCompletedDelegate == null)) {
                this.onRegisterDMCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterDMCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDMDelegate, new object[] {
                        oArea}, this.onEndRegisterDMDelegate, this.onRegisterDMCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginIsInArea(GPS.SilverlightMap.GTUService.Coordinate cn, string geoStr, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsInArea(cn, geoStr, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GPS.SilverlightMap.GTUService.IGTUQueryService.EndIsInArea(System.IAsyncResult result) {
            return base.Channel.EndIsInArea(result);
        }
        
        private System.IAsyncResult OnBeginIsInArea(object[] inValues, System.AsyncCallback callback, object asyncState) {
            GPS.SilverlightMap.GTUService.Coordinate cn = ((GPS.SilverlightMap.GTUService.Coordinate)(inValues[0]));
            string geoStr = ((string)(inValues[1]));
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginIsInArea(cn, geoStr, callback, asyncState);
        }
        
        private object[] OnEndIsInArea(System.IAsyncResult result) {
            bool retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndIsInArea(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsInAreaCompleted(object state) {
            if ((this.IsInAreaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsInAreaCompleted(this, new IsInAreaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsInAreaAsync(GPS.SilverlightMap.GTUService.Coordinate cn, string geoStr) {
            this.IsInAreaAsync(cn, geoStr, null);
        }
        
        public void IsInAreaAsync(GPS.SilverlightMap.GTUService.Coordinate cn, string geoStr, object userState) {
            if ((this.onBeginIsInAreaDelegate == null)) {
                this.onBeginIsInAreaDelegate = new BeginOperationDelegate(this.OnBeginIsInArea);
            }
            if ((this.onEndIsInAreaDelegate == null)) {
                this.onEndIsInAreaDelegate = new EndOperationDelegate(this.OnEndIsInArea);
            }
            if ((this.onIsInAreaCompletedDelegate == null)) {
                this.onIsInAreaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsInAreaCompleted);
            }
            base.InvokeAsync(this.onBeginIsInAreaDelegate, new object[] {
                        cn,
                        geoStr}, this.onEndIsInAreaDelegate, this.onIsInAreaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginRemoveTaskFromStore(int tid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveTaskFromStore(tid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GPS.SilverlightMap.GTUService.IGTUQueryService.EndRemoveTaskFromStore(System.IAsyncResult result) {
            return base.Channel.EndRemoveTaskFromStore(result);
        }
        
        private System.IAsyncResult OnBeginRemoveTaskFromStore(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int tid = ((int)(inValues[0]));
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginRemoveTaskFromStore(tid, callback, asyncState);
        }
        
        private object[] OnEndRemoveTaskFromStore(System.IAsyncResult result) {
            bool retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndRemoveTaskFromStore(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveTaskFromStoreCompleted(object state) {
            if ((this.RemoveTaskFromStoreCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveTaskFromStoreCompleted(this, new RemoveTaskFromStoreCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveTaskFromStoreAsync(int tid) {
            this.RemoveTaskFromStoreAsync(tid, null);
        }
        
        public void RemoveTaskFromStoreAsync(int tid, object userState) {
            if ((this.onBeginRemoveTaskFromStoreDelegate == null)) {
                this.onBeginRemoveTaskFromStoreDelegate = new BeginOperationDelegate(this.OnBeginRemoveTaskFromStore);
            }
            if ((this.onEndRemoveTaskFromStoreDelegate == null)) {
                this.onEndRemoveTaskFromStoreDelegate = new EndOperationDelegate(this.OnEndRemoveTaskFromStore);
            }
            if ((this.onRemoveTaskFromStoreCompletedDelegate == null)) {
                this.onRemoveTaskFromStoreCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveTaskFromStoreCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveTaskFromStoreDelegate, new object[] {
                        tid}, this.onEndRemoveTaskFromStoreDelegate, this.onRemoveTaskFromStoreCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GPS.SilverlightMap.GTUService.IGTUQueryService.BeginAddTaskToStore(int tid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTaskToStore(tid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GPS.SilverlightMap.GTUService.IGTUQueryService.EndAddTaskToStore(System.IAsyncResult result) {
            return base.Channel.EndAddTaskToStore(result);
        }
        
        private System.IAsyncResult OnBeginAddTaskToStore(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int tid = ((int)(inValues[0]));
            return ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).BeginAddTaskToStore(tid, callback, asyncState);
        }
        
        private object[] OnEndAddTaskToStore(System.IAsyncResult result) {
            bool retVal = ((GPS.SilverlightMap.GTUService.IGTUQueryService)(this)).EndAddTaskToStore(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTaskToStoreCompleted(object state) {
            if ((this.AddTaskToStoreCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTaskToStoreCompleted(this, new AddTaskToStoreCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTaskToStoreAsync(int tid) {
            this.AddTaskToStoreAsync(tid, null);
        }
        
        public void AddTaskToStoreAsync(int tid, object userState) {
            if ((this.onBeginAddTaskToStoreDelegate == null)) {
                this.onBeginAddTaskToStoreDelegate = new BeginOperationDelegate(this.OnBeginAddTaskToStore);
            }
            if ((this.onEndAddTaskToStoreDelegate == null)) {
                this.onEndAddTaskToStoreDelegate = new EndOperationDelegate(this.OnEndAddTaskToStore);
            }
            if ((this.onAddTaskToStoreCompletedDelegate == null)) {
                this.onAddTaskToStoreCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTaskToStoreCompleted);
            }
            base.InvokeAsync(this.onBeginAddTaskToStoreDelegate, new object[] {
                        tid}, this.onEndAddTaskToStoreDelegate, this.onAddTaskToStoreCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GPS.SilverlightMap.GTUService.IGTUQueryService CreateChannel() {
            return new GTUQueryServiceClientChannel(this);
        }
        
        private class GTUQueryServiceClientChannel : ChannelBase<GPS.SilverlightMap.GTUService.IGTUQueryService>, GPS.SilverlightMap.GTUService.IGTUQueryService {
            
            public GTUQueryServiceClientChannel(System.ServiceModel.ClientBase<GPS.SilverlightMap.GTUService.IGTUQueryService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetGTU(string sGTUCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sGTUCode;
                System.IAsyncResult _result = base.BeginInvoke("GetGTU", _args, callback, asyncState);
                return _result;
            }
            
            public GPS.SilverlightMap.GTUService.GTU EndGetGTU(System.IAsyncResult result) {
                object[] _args = new object[0];
                GPS.SilverlightMap.GTUService.GTU _result = ((GPS.SilverlightMap.GTUService.GTU)(base.EndInvoke("GetGTU", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGTUs(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sGTUCode;
                System.IAsyncResult _result = base.BeginInvoke("GetGTUs", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.GTU> EndGetGTUs(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.GTU> _result = ((System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.GTU>)(base.EndInvoke("GetGTUs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrentCoordinate(string sGTUCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sGTUCode;
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentCoordinate", _args, callback, asyncState);
                return _result;
            }
            
            public GPS.SilverlightMap.GTUService.Coordinate EndGetCurrentCoordinate(System.IAsyncResult result) {
                object[] _args = new object[0];
                GPS.SilverlightMap.GTUService.Coordinate _result = ((GPS.SilverlightMap.GTUService.Coordinate)(base.EndInvoke("GetCurrentCoordinate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrentCoordinates(System.Collections.ObjectModel.ObservableCollection<string> sGTUCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sGTUCode;
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentCoordinates", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> EndGetCurrentCoordinates(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> _result = ((System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate>)(base.EndInvoke("GetCurrentCoordinates", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGTUInfo(string sGTUCode, ref int nHeading, ref double dwSpeed, ref GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = sGTUCode;
                _args[1] = nHeading;
                _args[2] = dwSpeed;
                _args[3] = ePowerInfo;
                System.IAsyncResult _result = base.BeginInvoke("GetGTUInfo", _args, callback, asyncState);
                nHeading = ((int)(_args[1]));
                dwSpeed = ((double)(_args[2]));
                ePowerInfo = ((GPS.SilverlightMap.GTUService.PowerInfo)(_args[3]));
                return _result;
            }
            
            public bool EndGetGTUInfo(ref int nHeading, ref double dwSpeed, ref GPS.SilverlightMap.GTUService.PowerInfo ePowerInfo, System.IAsyncResult result) {
                object[] _args = new object[3];
                _args[0] = nHeading;
                _args[1] = dwSpeed;
                _args[2] = ePowerInfo;
                bool _result = ((bool)(base.EndInvoke("GetGTUInfo", _args, result)));
                nHeading = ((int)(_args[0]));
                dwSpeed = ((double)(_args[1]));
                ePowerInfo = ((GPS.SilverlightMap.GTUService.PowerInfo)(_args[2]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGTUCodeList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetGTUCodeList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetGTUCodeList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetGTUCodeList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegisterDM(System.Collections.ObjectModel.ObservableCollection<GPS.SilverlightMap.GTUService.Coordinate> oArea, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = oArea;
                System.IAsyncResult _result = base.BeginInvoke("RegisterDM", _args, callback, asyncState);
                return _result;
            }
            
            public string EndRegisterDM(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("RegisterDM", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsInArea(GPS.SilverlightMap.GTUService.Coordinate cn, string geoStr, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cn;
                _args[1] = geoStr;
                System.IAsyncResult _result = base.BeginInvoke("IsInArea", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsInArea(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsInArea", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveTaskFromStore(int tid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tid;
                System.IAsyncResult _result = base.BeginInvoke("RemoveTaskFromStore", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveTaskFromStore(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveTaskFromStore", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddTaskToStore(int tid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tid;
                System.IAsyncResult _result = base.BeginInvoke("AddTaskToStore", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddTaskToStore(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddTaskToStore", _args, result)));
                return _result;
            }
        }
    }
}
